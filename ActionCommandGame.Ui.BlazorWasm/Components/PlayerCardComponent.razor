@inject NavigationManager _navigationManager 
@inject ILocalStorageService _storageService
@inject IPlayerApi _playerApi

<div class="card player-card" style="width: 16rem;">
    <img src=@($"Images/{Player.ImageName}") class="card-img-top player-image" alt="player image">
    <div class="card-body bg-dark text-white">
        <h5 class="card-title primary-color">@Player.Name</h5>
        <p class="card-text">Money: @Player.Money</p>
        <p class="card-text">Experience: @Player.Experience</p>
        <div class="mt-4 text-center">
            <button @onclick="() => SetPlayerId(Player.Id)" class="btn border-white bg-black text-white btn-sm rounded-pill">Play</button>
            <button @onclick="ShowDeleteComponent" class="btn btn-danger btn-sm rounded-pill">Delete</button>
            <a href="/create/@Player.Id" class="btn btn-success btn-sm rounded-pill">Update</a>
        </div>
    </div>
</div>

<DeleteComponent @ref="DeleteComponent" OnDelete="IsDeleted" Player="Player"/>

@code {
    [Parameter]
    public PlayerResult Player { get; set; }

    private DeleteComponent? DeleteComponent { get; set; }

    [Parameter]
    public EventCallback IsDeleted { get; set; }

    private async Task SetPlayerId(int playerId)
    {
        await _storageService.SetItemAsync("PlayerId", Player.Id);
        _navigationManager.NavigateTo("/Game");
    }

    private void ShowDeleteComponent()
    {
        if (DeleteComponent is null)
        {
            return;
        }

        DeleteComponent.Open();
    }
}

@page "/"
@inject ILocalStorageService _storageService
@inject IIdentityApi _identityApi
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

@if (isLoginShowing)
{
    <div class="vh-100 login-background d-flex justify-content-center align-items-center">
        <div class="wrapper">
            <div class="w-100 text-center"> <i class="fas fa-dumbbell fa-fw fa-5x"></i> </div>
            <EditForm Model="_signInRequest" OnValidSubmit="LoginUser" class="p-3 mt-3">
                <audio id="player">
                    <source id="playerSource" src=""/>
                </audio>
                <DataAnnotationsValidator/>
                <ValidationMessage For="() => _signInRequest.Email"/>
                <div class="form-field d-flex align-items-center">
                    <span class="far fa-user"></span>
                    <InputText @bind-Value="_signInRequest.Email" type="text" name="userName" id="userName" placeholder="Username"/>
                </div>

                <ValidationMessage For="() => _signInRequest.Password"/>
                <div class="form-field d-flex align-items-center">
                    <span class="fas fa-key"></span>
                    <InputText @bind-Value="_signInRequest.Password" type="password" name="password" id="pwd" placeholder="Password"/>
                </div>

                <button type="submit" class="btn login-btn">Login</button>
            </EditForm>
            <div @onclick="ShowRegistration" class="text-center fs-6">
                Not A Member? <a href="#"><span class="signin-link">Sign Up</span></a>
            </div>
        </div>
    </div>
}

@if (isRegisterShowing)
{
    <div class="vh-100 login-background d-flex justify-content-center align-items-center">
        <div class="wrapper">
            <div class="w-100 text-center"> <i class="fas fa-dumbbell fa-fw fa-5x"></i> </div>
            <EditForm Model="_registrationRequest" OnValidSubmit="RegisterUser" class="p-3 mt-3">
                <audio id="player">
                    <source id="playerSource" src="" />
                </audio>
                <DataAnnotationsValidator />
                <ValidationMessage For="() => _registrationRequest.Email" />
                <div class="form-field d-flex align-items-center">
                    <span class="far fa-user"></span>
                    <InputText @bind-Value="_registrationRequest.Email" type="text" name="userName" id="userName" placeholder="Username" />
                </div>

                <ValidationMessage For="() => _registrationRequest.Password" />
                <div class="form-field d-flex align-items-center">
                    <span class="fas fa-key"></span>
                    <InputText @bind-Value="_registrationRequest.Password" type="password" name="password" id="pwd" placeholder="Password" />
                </div>
                <button type="submit" class="btn login-btn">Register</button>
            </EditForm>
            <div @onclick="ShowLogin" class="text-center fs-6">
                Already A Member? <a href="#"><span class="signin-link">Login</span></a>
            </div>
        </div>
    </div>
}

@code {

    private UserSignInRequest _signInRequest = new();
    private UserRegistrationRequest _registrationRequest = new();

    private bool isRegisterShowing;
    private bool isLoginShowing = true;

    public async Task LoginUser()
    {
        //var result = await _identityApi.SignInAsync(_signInRequest);
        //if (!result.Success)
        //{
        //    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error",
        //        "Take your pre-workout caffeine supplement first and FOCUS!!!!");
        //    await _jsRuntime.InvokeVoidAsync("PlayAudioFile", "/sounds/who-are-you.mp3");
        //    return;
        //}

        //await _storageService.SetItemAsync("Token", result.Token);
        _navigationManager.NavigateTo("/players");
    }

    public async Task RegisterUser()
    {
        var result = await _identityApi.RegisterAsync(_registrationRequest);
        await _storageService.SetItemAsync("Token", result.Token);

        if (result.Success)
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "success", "Thank you for registering!!!");
            isRegisterShowing = false;
            isLoginShowing = true;
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "error",
                "Take your pre-workout caffeine supplement first and FOCUS!!!!");
            await _jsRuntime.InvokeVoidAsync("PlayAudioFile", "/sounds/who-are-you.mp3");
        }
    }

    private void ShowRegistration()
    {
        isRegisterShowing = true;
        isLoginShowing = false;
    }

    private void ShowLogin()
    {
        isRegisterShowing = false;
        isLoginShowing = true;
    }
}

@page "/players"
@inject IPlayerApi _playerApi
@inject ILocalStorageService _storageService
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<div class="d-flex min-vh-100 position-relative w-100 players-background justify-content-center align-items-center">
    <div class="top-0 position-absolute end-0">
        <audio id="player">
            <source id="playerSource" src="" />
        </audio>
        <button @onclick="GameOver" class="btn logout-btn border-white primary-color me-3 mt-3 rounded-pill">
            LOGOUT
            <i class="fas fa-sign-out-alt ms-1"></i>
        </button>
    </div>
    <div class="container">
        <div class="row">
            @if (PlayersResult is null)
            {
                <p>Loading....</p>
            }
            else
            {
                <h1 class="primary-color">Select Your Lifter</h1>
                <div class="d-flex flex-row mb-3">
                    <h3 class="primary-color">Or <a href="/create" class="btn change-player-btn border-white primary-color rounded-pill create-btn">Create</a> A New One</h3>

                </div>

                @foreach (var player in PlayersResult)
                {
                    <div class="col-12 col-sm-6 col-lg-4 col-xl-3 mb-3 player-card">
                        <PlayerCardComponent IsDeleted="LoadPlayers" Player="player"></PlayerCardComponent>
                    </div>
                }
            }
        </div>
    </div>
</div>
  

@code
{
    private IList<PlayerResult>? PlayersResult { get; set; } = new List<PlayerResult>();
    private PlayerFilter? Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
        await base.OnInitializedAsync();
    }

    private async Task LoadPlayers()
    {
        
        Filter = new PlayerFilter { FilterUserPlayers = true };
        var players = await _playerApi.Find(Filter);

        PlayersResult = players.Data;
    }

    private async Task GameOver()
    {
        await _jsRuntime.InvokeVoidAsync("PlayAudioFile", "/sounds/ill-be-back.mp3");
        Task delay = Task.Delay(1200);
        await delay;
        _navigationManager.NavigateTo("/");
    }
}

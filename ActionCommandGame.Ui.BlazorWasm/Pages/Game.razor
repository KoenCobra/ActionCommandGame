@page "/game/{Id:int}"
@inject IJSRuntime _jsRuntime
@inject IGameApi _gameApi
@inject IPlayerApi _playerApi
@inject IItemApi _itemApi
@inject IPlayerItemApi _playerItemApi;

<div class="vh-100 game-background">
    <div class="container">
        <div style="height: 60vh" class="row">
            <div class="col-5 mt-5 text-center">
                <div class="d-flex flex-row justify-content-center mb-3">
                    <button @onclick="Lift" class="btn rounded-circle p-4 lift-button btn-dark"><i class="fas fa-dumbbell fa-fw fa-5x primary-color"></i></button>
                </div>
                <div class="primary-color h5">
                    @if (_positiveGameEvent != null)
                    {
                        <p>@Player.Name, You lift and...</p>
                        <p>@_positiveGameEvent.Name</p>
                        @if (!string.IsNullOrWhiteSpace(_positiveGameEvent.Description))
                        {
                            <p>@_positiveGameEvent.Description</p>
                        }
                        @if (_positiveGameEvent.Money > 0)
                        {
                            <p>@($"{_positiveGameEvent.Money}€ has been added to your account.")</p>
                        }
                    }
                    @if (_negativeGameEvent != null)
                    {
                        <p>@_negativeGameEvent.Name</p>
                        @if (!string.IsNullOrWhiteSpace(_negativeGameEvent.Description))
                        {
                            <p>@_negativeGameEvent.Description</p>
                        }
                    }
                </div>
            </div>
            <div class="col-3 mt-5 me-3">
                <StatsComponent Player="Player" />
            </div>
            <div class="col-3 mt-5">
                <div class="mb-3">
                    <LeaderboardComponent OrderedPlayers="_orderedPlayers" />
                </div>
                <div>
                    <div class="card text-center shadow">
                        <div @onclick="OpenModal" class="card-header h2 bg-dark text-white">
                            <a class="fas fa-cart-arrow-down icon-background shop-icon"></a>
                            PlayerItems
                        </div>
                        @if (!PlayerItems.Any())
                        {
                            <div class="d-flex playerItems-card align-items-center text-center">
                                <p>
                                    Click on the shopping cart to buy some cool stuff
                                </p>
                            </div>
                        }
                        else
                        {
                            <ul class="list-group list-group-flush playerItems-card ">
                                @foreach (var playerItem in PlayerItems)
                                {
                                    <PlayerItemComponent PlayerItem="playerItem"></PlayerItemComponent>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="text-center">
            @if (isLiftChanged)
            {
                <div style="height: 200px; width: 200px;" class="bg-dark"></div>

            }
            else
            {
                <div style="height: 200px; width: 200px;" class="bg-success"></div>

            }
        </div>
    </div>
    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display: @ModalDisplay">
        <div class="modal-dialog" role="document" style="z-index: 1055">
            <div class="modal-content">
                <div class="modal-header text-center bg-dark text-white">
                    <h5 class="modal-title ">Shop 'till you drop</h5>
                    <button @onclick="CloseModal" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            @foreach (var item in Result)
                            {
                                <div class="card align-items-center flex-column flex-lg-row p-3">
                                    <div class="card-body order-2 order-lg-1">
                                        <h5 class="mt-0 fw-bold mb-2">@item.Name</h5>
                                        <p class="fst-italic text-muted mb-0 small">@item.Description</p>
                                        <div class="d-flex flex-row">
                                            <div>
                                                <button @onclick="() => Buy(item.Id)" class="btn btn-outline-dark">BUY</button>
                                            </div>
                                            <div class="ms-3">
                                                <h6 class="fw-bold my-2"> Price: <span class="primary-color">@item.Price</span></h6>
                                            </div>
                                        </div>
                                    </div><img src="https://media.s-bol.com/rEY3V5k3nEyp/76wRVvy/516x840.jpg" alt="Generic placeholder image" width="50" class="ms-lg-5 order-1 order-lg-2">
                                </div>
                            }
                        </li>
                    </ul>
                </div>
            </div>

        </div>
        @if (ShowBackdrop)
        {
            <div class="modal-backdrop fade show" data-dismiss="modal" @onclick="CloseModal"></div>
        }
    </div>
</div>


@code {
    [Parameter]
    public int? Id { get; set; }

    private bool isLiftChanged;

    private PlayerResult Player { get; set; } = new();
    private IList<PlayerItemResult> PlayerItems { get; set; } = new List<PlayerItemResult>();

    private PositiveGameEventResult? _positiveGameEvent;
    private NegativeGameEventResult? _negativeGameEvent;

    private IList<PlayerResult> _orderedPlayers = new List<PlayerResult>();
    private IList<ItemResult> Result { get; set; } = new List<ItemResult>();
    private PlayerItemFilter? Filter { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await _playerApi.GetAsync(Id.Value);
        Player = result.Data;

        var items = await _itemApi.FindAsync();
        Result = items.Data;

        await RefreshLeaderBoard();
        await RefreshPlayeritems();
        await base.OnInitializedAsync();
    }

    private async Task Lift()
    {
        isLiftChanged = !isLiftChanged;

        var result = await _gameApi.PerformActionAsync(Id.Value);

        Player = result.Data.Player;
        _positiveGameEvent = result.Data.PositiveGameEvent;
        _negativeGameEvent = result.Data.NegativeGameEvent;

        await RefreshPlayeritems();
        await RefreshLeaderBoard();
        StateHasChanged();
    }

    private async Task Buy(int itemId)
    {

        var result = await _gameApi.BuyAsync(Player.Id, itemId);

        if (result.IsSuccess)
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "success",
                $"You bought {result.Data.Item.Name} for €{result.Data.Item.Price}, " +
                $" You have {result.Data.Player.Money} € left");

            Player = result.Data.Player;
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "error",
                "Blood, sweat, and tears are required to pay for this... GO LIFT!!");
        }

        await RefreshPlayeritems();
        StateHasChanged();
    }

    private async Task RefreshPlayeritems()
    {
        Filter = new PlayerItemFilter()
            {
                PlayerId = Player.Id
            };

        var playerItemResult = await _playerItemApi.FindAsync(Filter);

        PlayerItems = playerItemResult.Data;
    }

    private async Task RefreshLeaderBoard()
    {
        var playersResult = await _playerApi.Find(new PlayerFilter());
        _orderedPlayers = playersResult.Data.OrderByDescending(p => p.Experience).ToList();
    }

    public void OpenModal()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void CloseModal()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}

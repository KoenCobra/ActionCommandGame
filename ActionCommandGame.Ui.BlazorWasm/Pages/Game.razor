@page "/game/{Id:int}"
@inject IGameApi _gameApi
@inject IPlayerApi _playerApi
@inject IItemApi _itemApi
@inject IPlayerItemApi _playerItemApi;


<div class="vh-100 game-background">
    <div class="container">
        <div class="row">
            <div class="col-4">
                <div class="card shadow shop-card">
                    <div class="card-header bg-dark text-center text-white">
                        SHOP
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            @foreach (var item in Result)
                            {
                                <div class="d-flex flex-row">
                                    <div class="p-3">
                                        <img src="https://media.s-bol.com/rEY3V5k3nEyp/76wRVvy/516x840.jpg" height="80" width="80" class="img-fluid rounded-start" alt="Item Image">
                                    </div>
                                    <div class="d-flex justify-content-center">
                                        <div class="card-body">
                                            <h5 class="card-title">@item.Name</h5>
                                            <p class="card-text">@item.Description</p>
                                            <h6 class="my-2">Price: @item.Price</h6>
                                            <button @onclick="() => Buy(item.Id)" class="btn btn-outline-dark mt-3">BUY</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </li>
                    </ul>
                </div>
            </div>
            <div class="col-3">
                <button @onclick="Lift" class="btn btn-dark">Lift</button>
                <StatsComponent Player="Player" />
            </div>
            <div class="col-3">
                <LeaderboardComponent OrderedPlayers="_orderedPlayers" />
            </div>
            <div class="col-3">
                <div class="card text-center shadow">
                    <div class="card-header h2 bg-dark text-white">
                        PlayerItems
                    </div>
                    <ul class="list-group list-group-flush">
                        @foreach (var playerItem in PlayerItems)
                        {
                            <PlayerItemComponent PlayerItem="playerItem"></PlayerItemComponent>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int? Id { get; set; }

    private PlayerResult Player { get; set; } = new();
    private IList<PlayerItemResult> PlayerItems { get; set; } = new List<PlayerItemResult>();

    private PositiveGameEventResult? positiveGameEvent;
    private NegativeGameEventResult? _negativeGameEventResult;

    private IList<PlayerResult> _orderedPlayers = new List<PlayerResult>();
    private IList<ItemResult> Result { get; set; } = new List<ItemResult>();

    private PlayerItemFilter Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await _playerApi.GetAsync(Id.Value);
        Player = result.Data;

        var playersResult = await _playerApi.Find(new PlayerFilter());
        _orderedPlayers = playersResult.Data.OrderByDescending(p => p.Experience).ToList();

        var items = await _itemApi.FindAsync();
        Result = items.Data;

        Filter = new PlayerItemFilter()
        {
            PlayerId = Player.Id
        };

        var playerItemResult = await _playerItemApi.FindAsync(Filter);
        PlayerItems = playerItemResult.Data;

        await base.OnInitializedAsync();
    }

    private async Task Lift()
    {
        var result = await _gameApi.PerformActionAsync(Id.Value);

        Player = result.Data.Player;
        positiveGameEvent = result.Data.PositiveGameEvent;
        _negativeGameEventResult = result.Data.NegativeGameEvent;

        Filter = new PlayerItemFilter()
        {
            PlayerId = Player.Id
        };

        var playerItemResult = await _playerItemApi.FindAsync(Filter);
        PlayerItems = playerItemResult.Data;


        var playersResult = await _playerApi.Find(new PlayerFilter());
        _orderedPlayers = playersResult.Data.OrderByDescending(p => p.Experience).ToList();

        StateHasChanged();
    }

    private async Task Buy(int itemId)
    {
        var result = await _gameApi.BuyAsync(Player.Id, itemId);
        Player = result.Data.Player;

        Filter = new PlayerItemFilter()
        {
            PlayerId = Player.Id
        };

        var playerItemResult = await _playerItemApi.FindAsync(Filter);
        PlayerItems = playerItemResult.Data;

        StateHasChanged();
    }

}

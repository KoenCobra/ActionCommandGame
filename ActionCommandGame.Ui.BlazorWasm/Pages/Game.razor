@page "/game/{Id:int}"
@inject IGameApi _gameApi
@inject IPlayerApi _playerApi
@inject IItemApi _itemApi
@inject IPlayerItemApi _playerItemApi;
@inject Blazored.LocalStorage.ILocalStorageService _storageService

<div class="vh-100 game-background position-relative">
    <a href="/players" class="btn change-player-btn border-white primary-color position-relative start-0 top-0 ms-3 mt-3">Change Player</a>
    <div class="container">
        <div style="height: 60vh" class="row">
            <div class="col-5 mt-3 text-center lift-section">
                <div class="d-flex flex-row justify-content-center mb-5">
                    <button @onclick="Lift" class="btn rounded-circle p-4 lift-button btn-dark"><i class="fas fa-dumbbell fa-fw fa-5x primary-color"></i></button>
                </div>
                <div class="primary-color h4 lift-section mt-3">
                    @if (_positiveGameEvent is null)
                    {
                        <p class="h2">Pick up that weight, follow your destiny, and start lifting!!!</p>
                    }
                    @if (_positiveGameEvent != null)
                    {
                        <p>@Player.Name, You lift and...</p>
                        <p>@_positiveGameEvent.Name</p>
                        @if (!string.IsNullOrWhiteSpace(_positiveGameEvent.Description))
                        {
                            <p>@_positiveGameEvent.Description</p>
                        }
                        @if (_positiveGameEvent.Money > 0)
                        {
                            <p>@($"{_positiveGameEvent.Money}€ has been added to your account.")</p>
                        }
                    }
                    @if (_negativeGameEvent != null)
                    {
                        <p>@_negativeGameEvent.Name</p>
                        @if (!string.IsNullOrWhiteSpace(_negativeGameEvent.Description))
                        {
                            <p>@_negativeGameEvent.Description</p>

                            @foreach (var message in _negativeGameEventMessage)
                            {
                                <p>@message.Message</p>
                            }
                        }
                    }
                </div>
            </div>
            <div class="col-3 mt-3 me-3">
                <StatsComponent Player="Player"/>
            </div>
            <div class="col-3 mt-3">
                <div class="mb-3">
                    <LeaderboardComponent OrderedPlayers="_orderedPlayers"/>
                </div>
                <div>
                    <div class="card text-center shadow">
                        <div class="card-header h2 bg-dark text-white">
                            <a href="/shop"><i class="fas fa-cart-arrow-down icon-background shop-icon"></i></a>
                            PlayerItems
                        </div>
                        @if (!PlayerItems.Any())
                        {
                            <div class="d-flex playerItems-card align-items-center text-center">
                                <p>
                                    Click on the shopping cart to buy some cool stuff
                                </p>
                            </div>
                        }
                        else
                        {
                            <ul class="list-group list-group-flush playerItems-card ">
                                @foreach (var playerItem in PlayerItems)
                                {
                                    <PlayerItemComponent PlayerItem="playerItem"></PlayerItemComponent>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private int _playerId;

    private PlayerResult Player { get; set; } = new();
    private IList<PlayerItemResult> PlayerItems { get; set; } = new List<PlayerItemResult>();

    private PositiveGameEventResult? _positiveGameEvent;
    private NegativeGameEventResult? _negativeGameEvent;
    private IList<ServiceMessage> _negativeGameEventMessage;

    private IList<PlayerResult> _orderedPlayers = new List<PlayerResult>();
    private IList<ItemResult> Result { get; set; } = new List<ItemResult>();
    private PlayerItemFilter? Filter { get; set; }

    private List<string> ArnoldImages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await _storageService.SetItemAsync("PlayerId", Id.Value);
        _playerId = await _storageService.GetItemAsync<int>("PlayerId");

        var result = await _playerApi.GetAsync(_playerId);
        Player = result.Data;

        var items = await _itemApi.FindAsync();
        Result = items.Data;

        await RefreshLeaderBoard();
        await RefreshPlayeritems();
        await base.OnInitializedAsync();
    }

    private async Task Lift()
    {
        var result = await _gameApi.PerformActionAsync(_playerId);

        Player = result.Data.Player;
        _positiveGameEvent = result.Data.PositiveGameEvent;
        _negativeGameEvent = result.Data.NegativeGameEvent;
        _negativeGameEventMessage = result.Data.NegativeGameEventMessages;

        await RefreshPlayeritems();
        await RefreshLeaderBoard();
        StateHasChanged();
    }

    private async Task RefreshPlayeritems()
    {
        Filter = new PlayerItemFilter()
            {
                PlayerId = _playerId
            };

        var playerItemResult = await _playerItemApi.FindAsync(Filter);

        PlayerItems = playerItemResult.Data;
    }

    private async Task RefreshLeaderBoard()
    {
        var playersResult = await _playerApi.Find(new PlayerFilter());
        _orderedPlayers = playersResult.Data.OrderByDescending(p => p.Experience).ToList();
    }
}

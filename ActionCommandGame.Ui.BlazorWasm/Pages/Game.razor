@page "/game"
@inject IGameApi _gameApi
@inject IPlayerApi _playerApi
@inject IItemApi _itemApi
@inject IPlayerItemApi _playerItemApi;
@inject ILocalStorageService _storageService
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<div class="vh-100 game-background">

    <div class="d-flex w-100 justify-content-between">
        <a href="/players" class="btn change-player-btn fw-bolder border-white primary-color ms-3 mt-3 rounded-pill">
            Change Player
            <i class="fas fa-people-arrows ms-1"></i>
        </a>
        <audio id="player">
            <source id="playerSource" src="" />
        </audio>
        <button @onclick="Logout" class="btn logout-btn fw-bolder border-white primary-color me-3 mt-3 rounded-pill">
            LOGOUT
            <i class="fas fa-sign-out-alt ms-1"></i>
        </button>
    </div>
    <div class="container">
        <div style="height: 60vh" class="row">
            <div class="col-5 mt-2 text-center lift-section">
                <div class="d-flex flex-row justify-content-center mb-5">
                    <audio id="player">
                        <source id="playerSource" src="" />
                    </audio>
                    <button @onclick="Lift" class="btn rounded-circle p-4 lift-button btn-dark"><i class="fas fa-dumbbell fa-fw fa-5x primary-color"></i></button>
                </div>
                <div class="primary-color h3 lift-section mt-3">
                    @if (_positiveGameEvent is null)
                    {
                        <p class="h2">Pick up that weight, follow your destiny, and start lifting!!!</p>
                        @if (Player.CurrentFuelActionCooldownSeconds > 0)
                        {
                        <p class="h2">But you should wait a bit after eating all that food </p>
                        }
                    }
                    @if (_positiveGameEvent != null)
                    {
                        <p>@Player.Name, You lift and...</p>
                        <p>@_positiveGameEvent.Name</p>
                        @if (!string.IsNullOrWhiteSpace(_positiveGameEvent.Description))
                        {
                            <p>@_positiveGameEvent.Description</p>
                        }
                        @if (_positiveGameEvent.Gains > 0)
                        {
                            <p>@($"{_positiveGameEvent.Gains} gains has been added to your account.")</p>
                        }
                    }
                    @if (_negativeGameEvent != null)
                    {
                        <p>@_negativeGameEvent.Name</p>
                        @if (!string.IsNullOrWhiteSpace(_negativeGameEvent.Description))
                        {
                            <p>@_negativeGameEvent.Description</p>

                            @foreach (var message in _negativeGameEventMessage)
                            {
                                <p>@message.Message</p>
                            }
                        }
                    }
                </div>
            </div>
            <div class="col-3 mt-2 me-3">
                <StatsComponent Player="Player" />
            </div>
            <div class="col-3 mt-2">
                <div class="mb-3">
                    <LeaderboardComponent OrderedPlayers="_orderedPlayers" />
                </div>
                <div>
                    <div class="card text-center shadow fw-bold">
                        <div class="card-header h2 bg-dark text-white">
                            <a href="/shop"><i class="fas fa-cart-arrow-down icon-background shop-icon"></i></a>
                            PlayerItems
                        </div>
                        @if (!PlayerItems.Any())
                        {
                            <div class="d-flex playerItems-card align-items-center text-center">
                                <p>
                                    Click on the shopping cart to buy some cool stuff
                                </p>
                            </div>
                        }
                        else
                        {
                            <ul class="list-group list-group-flush playerItems-card ">
                                @foreach (var playerItem in PlayerItems)
                                {
                                    <PlayerItemComponent PlayerItem="playerItem"></PlayerItemComponent>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <iframe width="0" height="0"
            src="https://www.youtube.com/embed/NmM1BLh9bO0?controls=0&amp;start=16?&autoplay=1"
            title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen></iframe>
</div>

@code {

    private int _playerId;
    private PlayerResult Player { get; set; } = new();
    private IList<PlayerItemResult> PlayerItems { get; set; } = new List<PlayerItemResult>();

    private PositiveGameEventResult? _positiveGameEvent;
    private NegativeGameEventResult? _negativeGameEvent;
    private IList<ServiceMessage>? _negativeGameEventMessage;

    private IList<PlayerResult> _orderedPlayers = new List<PlayerResult>();
    private PlayerItemFilter? Filter { get; set; }

    private List<string> ArnoldMotivations = new List<string>()
    {
        "come-on.mp3", "come-on-2.mp3", "doin.mp3", "do-it.mp3", "do-it-now.mp3", "choir.mp3",
        "dont-worry.mp3", "go-on.mp3", "good.mp3", "hit-spot.mp3", "stop.mp3", "terrific.mp3", "terrific (1).mp3"
    };

    protected override async Task OnInitializedAsync()
    {
        _playerId = await _storageService.GetItemAsync<int>("PlayerId");
        var result = await _playerApi.GetAsync(_playerId);
        Player = result.Data;

        await RefreshLeaderBoard();
        await RefreshPlayeritems();
        await base.OnInitializedAsync();
    }

    private async Task Lift()
    {
        var result = await _gameApi.PerformActionAsync(_playerId);

        Random random = new Random();
        int index = random.Next(ArnoldMotivations.Count);
        await _jsRuntime.InvokeVoidAsync("PlayAudioFile", $"/sounds/{ArnoldMotivations[index]}");

        Player = result.Data.Player;
        _positiveGameEvent = result.Data.PositiveGameEvent;
        _negativeGameEvent = result.Data.NegativeGameEvent;
        _negativeGameEventMessage = result.Data.NegativeGameEventMessages;

        await RefreshPlayeritems();
        await RefreshLeaderBoard();
        StateHasChanged();
    }

    private async Task RefreshPlayeritems()
    {
        Filter = new PlayerItemFilter()
            {
                PlayerId = _playerId
            };

        var playerItemResult = await _playerItemApi.FindAsync(Filter);
        PlayerItems = playerItemResult.Data;
    }

    private async Task RefreshLeaderBoard()
    {
        var playersResult = await _playerApi.Find(new PlayerFilter());
        _orderedPlayers = playersResult.Data.OrderByDescending(p => p.Experience).ToList();
    }

    private async Task Logout()
    {
        await _jsRuntime.InvokeVoidAsync("PlayAudioFile", "/sounds/ill-be-back.mp3");
        Task delay = Task.Delay(1600);
        await delay;
        _navigationManager.NavigateTo("/");
    }
}
